apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

def feedbackEmail
def isRSTPublicRelease = System.env.RST_PUBLIC_RELEASE
if (isRSTPublicRelease) {
    println("Performing signed release build")
    apply from: "loadPrivateData.gradle"
    println("Got props:" + privateProps)
    feedbackEmail = privateProps['rst.feedbackEmail']
    if (feedbackEmail == null || feedbackEmail.isEmpty()) {
        throw new GradleException("No feedback e-mail set")
    }
} else {
    println("Performing regular build")
    feedbackEmail = "feedback@test.com"
}
def versionProps = new Properties()
file("../version.properties").withInputStream {
    stream -> versionProps.load(stream)
}
def releaseVersion = "${versionProps['rst.major_version']}" +
        ".${versionProps['rst.minor_version']}" +
        ".${versionProps['rst.version_code']}"
archivesBaseName = "open-sms-locator-$releaseVersion"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ru.rst.rescuesmstracker"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode String.format("%d%03d%04d",
                versionProps['rst.major_version'] as Integer,
                versionProps['rst.minor_version'] as Integer,
                versionProps['rst.version_code'] as Integer) as Integer
        versionName releaseVersion

        buildConfigField "String", "FEEDBACK_EMAIL", "\"$feedbackEmail\""
    }
    if (isRSTPublicRelease) {
        signingConfigs {
            config {
                keyAlias privateProps['rst.keyAlias']
                keyPassword privateProps['rst.keyPassword']
                storeFile keyStoreFile
                storePassword privateProps['rst.storePassword']
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (isRSTPublicRelease) {
                signingConfig signingConfigs.config
            }
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}
def supportVersion = "28.0.0"

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation "org.mockito:mockito-core:3.5.10"
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'junit:junit:4.13'
    testImplementation "org.powermock:powermock-module-junit4:1.7.3"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.7.0"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.3"
    testImplementation "org.powermock:powermock-classloading-xstream:1.7.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    implementation "io.reactivex.rxjava2:rxjava:2.2.19"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation 'com.kyleduo.switchbutton:library:1.4.6'
    implementation 'com.redmadrobot:inputmask:2.3.0'
    implementation 'com.mikhaellopez:circularprogressbar:1.1.1'
    implementation "com.android.support:design:$supportVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}

task incrementVersion {
    doLast {
        versionProps['rst.version_code'] = ((versionProps['rst.version_code'] as Integer) + 1).toString()
        file("../version.properties").withOutputStream {
            stream -> versionProps.store(stream, "version autoincrement")
        }
    }
}

task pushVersion {
    doLast {
        println("Commiting version")
        new ProcessBuilder("git", "commit", "-m", "[skip ci] Version autoincrement", "version.properties").start().waitFor()
        println("Creating tag")
        new ProcessBuilder("git", "tag", "-a", releaseVersion, "-m", "Release published").start().waitFor()
        println("Pushing tag")
        "git push --all --follow-tags".execute().waitFor()
    }
}